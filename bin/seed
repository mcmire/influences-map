#!/usr/bin/env node --trace-warnings --unhandled-rejections=strict

const grakn = require("../server/grakn");

function clearKeyspace(client) {
  console.log("Clearing keyspace...");
  return grakn.clearKeyspace(client);
}

function defineSchema(session) {
  console.log("Defining schema...");
  return grakn.performWriteQuery(
    session,
    `
      define

      name sub attribute,
        value string;
      alias sub attribute,
        value string;
      first-name sub attribute,
        value string;
      last-name sub attribute,
        value string;
      start-date sub attribute,
        value datetime;
      end-date sub attribute,
        value datetime;
      position sub attribute,
        value string;
      source sub attribute,
        value string,
        regex "^https?://.+$";

      employment sub relation,
        relates employee,
        relates employer,
        has position,
        has start-date,
        has end-date,
        has source,
        plays employment-source,
        plays employment-target;
      introduction sub relation,
        relates employment-source,
        relates employment-target,
        has source;

      person sub entity,
        has first-name,
        has last-name,
        has alias,
        plays employee;
      company sub entity,
        has name,
        has alias,
        plays employer;
      show sub entity,
        has name,
        has alias,
        plays employer;
    `
  );
}

async function seedDatabase(session) {
  console.log("Seeding database...");
  console.log("- Creating show");
  await grakn.performWriteQuery(
    session,
    `
      insert $x isa show,
        has name "Saturday Night Live",
        has alias "SNL";
    `
  );
  console.log("- Creating people");
  await grakn.performWriteQuery(
    session,
    `
      insert $x isa person,
        has first-name "Conan",
        has last-name "O'Brien";
    `
  );
  await grakn.performWriteQuery(
    session,
    `
      insert $x isa person,
        has first-name "Robert",
        has last-name "Smigel";
    `
  );
  console.log("- Creating employments");
  await grakn.performWriteQuery(
    session,
    `
      match
        $snl isa show, has name "Saturday Night Live";
        $conan isa person, has first-name "Conan", has last-name "O'Brien";
      insert
        $conan-snl (employer: $snl, employee: $conan) isa employment; $conan-snl
          has position "writer",
          has start-date 1988-01-01,
          has end-date 1991-01-01,
          has source "https://en.wikipedia.org/wiki/Conan_O%27Brien";
    `
  );
  await grakn.performWriteQuery(
    session,
    `
      match
        $snl isa show, has name "Saturday Night Live";
        $smigel isa person, has first-name "Robert", has last-name "Smigel";
      insert
        $smigel-snl (employer: $snl, employee: $smigel) isa employment; $smigel-snl
          has position "writer",
          has start-date 1985-01-01,
          has end-date 1993-01-01,
          has source "https://en.wikipedia.org/wiki/Robert_Smigel";
    `
  );
  await grakn.performWriteQuery(
    session,
    `
      match
        $conan isa person, has first-name "Conan", has last-name "O'Brien";
        $smigel isa person, has first-name "Robert", has last-name "Smigel";
        $conan-snl (employer: $snl, employee: $conan) isa employment;
        $smigel-snl (employer: $snl, employee: $smigel) isa employment;
      insert
        $conan-smigel-intro (employment-source: $conan-snl, employment-target: $smigel-snl) isa introduction; $conan-smigel-intro
          has source "https://en.wikipedia.org/wiki/Conan_O%27Brien",
          has source "https://en.wikipedia.org/wiki/Robert_Smigel";
    `
  );
}

async function main() {
  return grakn.withClient(async (client) => {
    await clearKeyspace(client);
    await grakn.withSession(client, async (session) => {
      await defineSchema(session);
      await seedDatabase(session);
    });
  });
}

main()
  .then(() => {
    console.log("Done!");
    process.exit();
  })
  .catch((error) => {
    console.error(error.stack);
    process.exit(1);
  });
